{% import "rally.helpers" as rally with context %}

{% set p_query_workflows = (query_workflows | default(["discover/search", "discover/visualize", "kafka", "apache"])) %}

{% set p_num_query_workflows = p_query_workflows | length %}
{% set num_corpus = 18 %}
{% set p_bulk_indexing_clients = (bulk_indexing_clients | default(8)) %}
{% set p_initial_indices_count = (initial_indices_count | default(0)) %}
{% set p_initial_frozen_indices_count = (initial_frozen_indices_count | default(0)) %}
{% set p_bulk_size = bulk_size | default(1000) %}
{% set p_user_think_time = (think_time_interval | default(4)) %}
{% set p_workflow_time_interval = (workflow_time_interval | default(30)) %}
{% set p_user_workflow_time = p_workflow_time_interval * p_num_query_workflows %}
{% set p_query_warmup_time_period = (query_warmup_time_period | default(120)) %}
{% set p_query_time_period = (query_time_period | default(900)) %}
{% set p_query_request_params = (query_request_params | default({}))%}

{% set p_throttle_indexing = (throttle_indexing | default(false)) %}
{% set p_max_download_gb = (max_total_download_gb | default(2 * num_corpus)) %}
{% set p_max_download_per_corpus_gb = ([p_max_download_gb / num_corpus, 1] | max | int ) %}
{% set p_corpora_uri_base = (corpora_uri_base | default("https://rally-tracks.elastic.co")) %}

{% set p_recovery_max_bytes_per_sec = (recovery_max_bytes_per_sec | default(-1)) %}
{% set p_node_concurrent_recoveries = (node_concurrent_recoveries | default(2)) %}
{% set p_snapshot_repo_name = (snapshot_repo_name | default("logging")) %}
{% set p_snapshot_repo_type = (snapshot_repo_type | default("s3")) %}
{% set p_snapshot_repo_settings = (snapshot_repo_settings | default({
    "bucket": snapshot_bucket | default("test-bucket"),
    "client": "default",
    "base_path": snapshot_base_path | default("observability/logging"),
    "max_snapshot_bytes_per_sec": -1
}))%}
{% set p_snapshot_name = (snapshot_name | default("logging-test")) %}
{% set p_restore_data_streams = (restore_data_streams | default("logs-*")) %}
{% set p_snapshot_metadata = (snapshot_metadata | default({}))%}
{% set p_snapshot_rename_suffix = (snapshot_rename_suffix | default("") ) %}

{% set es_version = "8.3.2" %}

{% set default_integration_ratios = {
    "kafka": {
      "corpora": {
        "kafka-logs": 0.50
      }
    },
    "apache": {
      "corpora": {
        "apache-access-logs": 0.25,
        "apache-error-logs": 0.25
      }
    },
  }
%}

{% set default_exclude_properties = {
    "kafka-logs": ["container"],
    "apache-access-logs": ["container"],
    "apache-error-logs": ["container"]
  }
%}

{
  "version": 2,
  "description": "Track for simulating logging workloads",
  "dependencies": [
    "file:///home/baamonde/code/elastic/package-assets"
  ],
    "parameters": {
        "assets": [
            {
            "repository": "file:///home/baamonde/code/elastic/package-assets/assets/production",
            "packages": [
                "kafka/0.5.0",
                "apache/1.3.0"
            ]
        }
        ],
    "raw-data-volume-per-day": "{{ raw_data_volume_per_day | default('0.1GB') }}",
    "random-seed": {{ random_seed | default(13) | int }},
    "generator-batch-size": 10000,
    "sample-size": 10000,
    "max-generated-corpus-size": "{{ max_generated_corpus_size | default('2GB') }}",
{% if data_generation_clients %}
    "data-generation-clients": {{ data_generation_clients }},
{% endif %}
    "start-date": "{{ start_date | default('2020-01-01') }}",
    "bulk-start-date": "{{ bulk_start_date }}",
    "end-date": "{{ end_date | default('2020-01-02') }}",
    "bulk-end-date": "{{ bulk_end_date }}",
    "query-average-interval": "{{ query_average_interval }}",
    "query-min-date": "{{ query_min_date | default('2020-01-01') }}",
    "query-max-date": {{ query_max_date | default(None) | tojson }},
    "query-max-date-start": {{ query_max_date_start |default(None) | tojson }},
    "max-total-download-per-corpus-gb": "{{ p_max_download_per_corpus_gb }}",
    "integration-ratios": {{ integration_ratios | default(default_integration_ratios) | tojson }},
    "exclude-properties": {{ exclude_properties | default(default_exclude_properties) | tojson }},
    "wait-for-status": "{{ wait_for_status | default('green') }}",
    "force-data-generation": {{ force_data_generation | default(false) | tojson }},
    "detailed-results": {{ detailed_results | default(false) | tojson }},
    "number-of-workflows": {{ p_num_query_workflows }},
    "number_of_replicas" : "{{number_of_replicas | default('1')}}",
    "number_of_shards" : "{{number_of_shards | default('1')}}"
  },
  "component-templates": [
    {
        "name": "track-custom-mappings",
        "template": "./templates/component/track-custom-mappings.json"
     }
  ],
  "corpora": [
    {
      "name": "kafka-logs",
      "base-url": "{{p_corpora_uri_base}}/observability/logging/kafka/kafka.log/raw",
      "documents": [
        {% for i in range([p_max_download_per_corpus_gb, 53] | min) %}
          {% if not i == 0 %},{% endif %}
          {
          "target-data-stream": "logs-kafka.log-default",
          "source-file": "document-{{i}}.json.bz2",
          {# These "document-count" values equate to approximately 1GB of de-compressed data. #}
          "document-count": 312333
          }
        {% endfor %}
      ]
  },
  {
      "name": "apache-access-logs",
      "base-url": "{{p_corpora_uri_base}}/observability/logging/apache/apache.access/raw",
      "documents": [
        {% for i in range([p_max_download_per_corpus_gb, 45] | min) %}
          {% if not i == 0 %},{% endif %}
          {
            "target-data-stream": "logs-apache.access-default",
            "source-file": "document-{{i}}.json.bz2",
            "document-count": 322200
          }
        {% endfor %}
      ]
  },
  {
      "name": "apache-error-logs",
      "base-url": "{{p_corpora_uri_base}}/observability/logging/apache/apache.error/raw",
      "documents": [
        {
          "target-data-stream": "logs-apache.error-default",
          "source-file": "document-0.json.bz2",
          "document-count": 310000
        }
      ]
    }
  ],
  "challenges": [
    {{ rally.collect(parts="challenges/*.json") }}
  ]
}
